/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hattmakarna;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import oru.inf.InfDB;
import oru.inf.InfException;


/**
 *
 * @author nicolehassanpour
 */
public class OrderHistorik extends javax.swing.JFrame {
        private InfDB idb; 


    /**
     * Creates new form OrderHistorik
     */
    public OrderHistorik(InfDB idb) {
        initComponents();
        this.idb = idb;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton1sök = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ordernummer", "Status", "Datum", "Express", "Förnamn", "Efternamn", "Kundens E-post"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Orderhistorik");

        jLabel2.setText("Startdatum:");

        jLabel3.setText("Slutdatum:");

        jLabel4.setText("Kundens namn eller E-post:");

        jButton1sök.setText("Sök");
        jButton1sök.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1sökActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 838, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(422, 422, 422)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1)
                            .addComponent(jTextField2)
                            .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(249, 249, 249)
                        .addComponent(jButton1sök)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1sök, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1sökActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1sökActionPerformed

        // Validera datumformat
        String startdatum = jTextField1.getText();
        String slutdatum = jTextField2.getText();
        String kundNamnochMail = jTextField3.getText();
        
        String kundEpost = "";
        String kundNamn = "";
           
        if(validering.isValidePost(kundNamnochMail)){
            kundEpost = kundNamnochMail;     
        } else if(validering.isValidNamn(kundNamnochMail)){
            kundNamn = kundNamnochMail;
            
        
        if (!kundNamn.contains(" ")) {
        JOptionPane.showMessageDialog(null, "Skriv både för- och efternamn, med ett mellanslag emellan.");
        return; // Stoppa metoden här om namnet är ogiltigt
    }
     
        }
        
        
      
        //Kollar även så datum har rätt format med hjälp av valideringsklass
        if(validering.isValidDatum(startdatum) && validering.isValidDatum(slutdatum) || 
                (validering.isValidePost(kundEpost) || validering.isValidNamn(kundNamn))){

           
            
        try { 
          
        ArrayList<HashMap<String, String>> resultat = new ArrayList<>();

        // Fall 1: Sökning med E-post
        if (!kundEpost.isEmpty()) {
            String sql = "SELECT OID, Status, Datum, express, kund.Förnamn, kund.Efternamn, kund.Email "
                    + "FROM ordrar INNER JOIN kund ON ordrar.KundID = kund.KundID "
                    + "WHERE kund.Email = '" + kundEpost + "'";
        
        resultat = idb.fetchRows(sql);
}
           
           
          else if (!kundNamn.isEmpty()) {
            String[] delar = kundNamn.split(" ");
            String fornamn = delar[0];
            String efternamn = delar[1];
            String sql1 = "SELECT OID, Status, Datum, express, kund.Förnamn, kund.Efternamn, kund.Email "
                    + "FROM ordrar INNER JOIN kund ON ordrar.KundID = kund.KundID "
                    + "WHERE kund.Förnamn = '" + fornamn + "' AND kund.Efternamn = '" + efternamn + "'";
            resultat = idb.fetchRows(sql1);
            
}
           else if (!startdatum.isEmpty() && !slutdatum.isEmpty()) {
            String sql3 = "SELECT OID, Status, Datum, express, kund.Förnamn, kund.Efternamn, kund.Email "
                    + "FROM ordrar INNER JOIN kund ON ordrar.KundID = kund.KundID "
                    + "WHERE Datum BETWEEN '" + startdatum + "' AND '" + slutdatum + "'";
            resultat = idb.fetchRows(sql3);
        }
          
          DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
           model.setRowCount(0);
           
            // Visa resultaten i textområdet
        if(resultat!= null && !resultat.isEmpty()){
            for (HashMap<String, String> rad : resultat) {
                model.addRow(new Object[]{
                rad.get("OID"),
                rad.get("Status"),
                rad.get("Datum"),
                rad.get("express"),
                rad.get("Förnamn"),
                rad.get("Efternamn"),
                rad.get("Email"),
             
                                        });
                } 

           
        } else {
                System.out.println("Kund hittas inte");
                }               


                 
           } catch(InfException e) {
               System.out.println("Ett fel inträffade vid hämtning av data från databasen1: " + e.getMessage());
                   } 

         
           } else {
            if(startdatum.isEmpty() && slutdatum.isEmpty() && kundNamnochMail.isEmpty()) {
                    
                JOptionPane.showMessageDialog(null, "Raderna ovan måste fyllas");

            }
           
            //!validering.isValidDatum (startdatum) && !validering.isValidDatum (slutdatum)
            else if(!startdatum.isEmpty() && !slutdatum.isEmpty() && !kundNamnochMail.isEmpty()){

                JOptionPane.showMessageDialog(null, "du måste fylla de alla rätt");
                
            }
            
            else if((!validering.isValidePost(kundEpost) && !validering.isValidNamn(kundNamn)) && !kundNamnochMail.isEmpty()){
                
                JOptionPane.showMessageDialog(null, "Sätt in rätt namn eller epost!");
                
            }
            else if(!validering.isValidDatum (startdatum) && !validering.isValidDatum (slutdatum)){
                
                JOptionPane.showMessageDialog(null, "Datum måste vara i formatet ÅÅÅÅ-MM-DD (ex: 2025-01-13).");
                
            }
            
        
        
        
    }//GEN-LAST:event_jButton1sökActionPerformed
        
          
    }   
    
        
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderHistorik.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderHistorik.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderHistorik.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderHistorik.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new OrderHistorik().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1sök;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}



