/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hattmakarna;
import oru.inf.InfDB;
import oru.inf.InfException;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import java.util.HashMap;
/**
 *
 * @author diyar
 */
public class SökefterOrderEmail extends javax.swing.JFrame {
private InfDB idb;
    /**
     * Creates new form SökefterOrderEmail
     */
    public SökefterOrderEmail(InfDB idb) {
        initComponents();
        this.idb = idb;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BtnSök = new javax.swing.JButton();
        Tfemail = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Combobox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        BtnSök.setText("Sök");
        BtnSök.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSökActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Förnamn", "Efternamn", "Adress", "OrderID", "Status", "Datum"
            }
        ));
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(2).setResizable(false);
        }

        Combobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Email", "Datum", " " }));
        Combobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(Combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(Tfemail, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82)
                .addComponent(BtnSök)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnSök, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Tfemail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnSökActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSökActionPerformed
                  ((DefaultTableModel) jTable1.getModel()).setRowCount(0);                   
                 String SelectedCombo = (String) Combobox.getSelectedItem();                    
                
                 if ("Email".equalsIgnoreCase(SelectedCombo)) {
            

                String email = Tfemail.getText();
                String kundIDFraga = "SELECT KundID FROM kund WHERE Email = '" + email + "'";
                String kundID = null;
                try{
                kundID = idb.fetchSingle(kundIDFraga);
                }
                catch (InfException ex){
                      JOptionPane.showMessageDialog(null, "1");
                }
                if (kundID != null) {

                    String kundInfoFraga = "Select * from kund WHERE KundID = '" + kundID + "'";
                    HashMap<String, String> kundInfo = new HashMap<>();
                    try{
                        
                    
                    kundInfo = idb.fetchRow(kundInfoFraga);
                    
                    }
                    catch (InfException ex){
                        JOptionPane.showMessageDialog(null, "2");
                    }
                    String fornamn = kundInfo.get("Förnamn");
                    String efternamn = kundInfo.get("Efternamn");
                    String adress = kundInfo.get("Adress");

                    String orderFraga = "SELECT * FROM ordrar WHERE KundID = '" + kundID + "'";
                    ArrayList<HashMap<String, String>> orderLista = new ArrayList<>();
                    try{
                    orderLista = idb.fetchRows(orderFraga);
                    }
                    catch (InfException ex){
                        JOptionPane.showMessageDialog(null, "3");
                    }

                    for (HashMap<String, String> rad : orderLista) {
                        String oid = rad.get("OID");
                        String status = rad.get("Status");
                        String datum = rad.get("Datum");

                        ((DefaultTableModel) jTable1.getModel()).addRow(new Object[]{fornamn, efternamn, adress, oid, status, datum});           
                    }

                    

                } else  {
                    JOptionPane.showMessageDialog(null, "Ingen kund hittades med den e-postadressen.");
                }

          
            }

        
                 else   {  

                String Datum = Tfemail.getText();
 
                    String orderFraga = "Select * from ordrar WHERE Datum = '" + Datum + "'";
                    
                    ArrayList<HashMap<String, String>> orderLista = new ArrayList<>();
                    try{
                        orderLista = idb.fetchRows(orderFraga);
                    }
                    catch (InfException ex) {
                         JOptionPane.showMessageDialog(null, "Fel vid Hämtning av Data 123" + ex.getMessage());
                        
                    }
                        
                    for (HashMap<String, String> rad : orderLista) {
                        String kundID = rad.get("KundID");
                        String oid = rad.get("OID");
                        String status = rad.get("Status");
                        String datum = rad.get("Datum");
                        String Kundinfo = "Select * from kund WHERE kundID = '" + kundID + "'";
                        HashMap<String, String> Kundinformation = new HashMap<>();
                        
                        try{
                            Kundinformation = idb.fetchRow(Kundinfo);
                        }
                        catch (InfException ex){
                                JOptionPane.showMessageDialog(null, "Fel vid Hämtning av Data123 " + ex.getMessage());
                        }
                        String förnamn = Kundinformation.get("Förnamn");
                        String efternamn = Kundinformation.get("Efternamn");
                        String adress = Kundinformation.get("Adress");
                        
                        ((DefaultTableModel) jTable1.getModel()).addRow(new Object[]{förnamn, efternamn, adress, oid, status, datum});
                    

                }

             
            
        }

    }//GEN-LAST:event_BtnSökActionPerformed

    private void ComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboboxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SökefterOrderEmail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SökefterOrderEmail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SökefterOrderEmail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SökefterOrderEmail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new SökefterOrderEmail().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnSök;
    private javax.swing.JComboBox<String> Combobox;
    private javax.swing.JTextField Tfemail;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
