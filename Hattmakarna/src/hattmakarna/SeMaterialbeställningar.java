/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hattmakarna;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import oru.inf.InfDB;
import oru.inf.InfException;
/** 
 *
 * @author nicolehassanpour
 */
public class SeMaterialbeställningar extends javax.swing.JFrame {
    private InfDB idb;
 

    /**
     * Creates new form SeMaterialbeställningar
     */
    public SeMaterialbeställningar(InfDB idb) {
        this.idb = idb;
        initComponents();
        hamtaBeställningar();
        fyllcbValjstatus();
        
    }
    
    public void hamtaBeställningar () {
         try {
        
        //sql fråga för att hämta all info från beställningar
        String sqlFraga1 = "SELECT * FROM beställning";
        
            ArrayList<HashMap<String, String>> beställningar = idb.fetchRows(sqlFraga1);
        
         DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        
            // om beställningar table inte är null och inte är tom så hämtas data från databasen och läggs till i jTable.
            if (beställningar != null && !beställningar.isEmpty()) {
                for (HashMap<String, String> rad : beställningar) {
                model.addRow(new Object[]{
                rad.get("BeställningsID"),
                rad.get("Datum"),
                rad.get("PersonalID"),
                rad.get("status"),
                                         });       
              
                }

       
            } else {
                System.out.println("Inga beställningar hittades!");
                   }
            
            }catch(Exception e) {   
            System.out.println("Ett fel inträffade vid hämtning av data från databasen: " + e.getMessage());
                                  }              
                

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbValjstatus = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Beställnings-ID", "Datum", "Personal-ID", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Beställnings-ID", "Datum", "Personal-ID", "Status"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jLabel1.setText("Sök på beställningar efter status");

        jLabel2.setText("Sök på ej påbörjade beställningar efter datum");

        cbValjstatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Välj status" }));
        cbValjstatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbValjstatusActionPerformed(evt);
            }
        });

        jLabel3.setText("Status:");

        jLabel5.setText("Slutdatum:");

        jLabel4.setText("Startdatum:");

        jButton1.setText("Sök");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Ändra status på materialbeställning");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(177, 177, 177)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(134, 134, 134))
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbValjstatus, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 533, Short.MAX_VALUE)
                                .addGap(16, 16, 16))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextField2))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(34, 34, 34)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbValjstatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void fyllcbValjstatus() {
        String sqlFraga = "SELECT DISTINCT status FROM beställning ";
        
        ArrayList<String>AllaBeställningar;
        
        try{    
        
            AllaBeställningar = idb.fetchColumn(sqlFraga);
                
                for(String status : AllaBeställningar){
                    cbValjstatus.addItem(status);
                    
                }
                
        }catch (InfException e){
                JOptionPane.showMessageDialog(null, "Databasfel!_1_");
                    System.out.println("Internt felmeddelande" + e.getMessage());
            

        
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Databasfel_2_!");
                System.out.println("Internt felmeddelande" + e.getMessage());
    
        }
                
        
    }
    
    private void cbValjstatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbValjstatusActionPerformed
        
        try { 
        // Hämta vald status från comboboxen
        String valdStatus = cbValjstatus.getSelectedItem().toString();
        
        String sqlFraga = "SELECT * "
                + "FROM beställning "
                + "WHERE status = '" + valdStatus + "' "; 
        
          ArrayList<HashMap<String, String>> soktaBestallningar = idb.fetchRows(sqlFraga); 
        
         DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
         model.setRowCount(0);
        
        // Visa resultaten i textområdet
        if (soktaBestallningar != null && !soktaBestallningar.isEmpty()) {
            for (HashMap<String, String> bestallning : soktaBestallningar) {
                model.addRow(new Object[]{
                bestallning.get("BeställningsID"),
                bestallning.get("Datum"),
                bestallning.get("PersonalID"),
                bestallning.get("status"),
                                             });
            }
        } else {
           JOptionPane.showMessageDialog(null, "Inga beställningar hittades för vald status.");
        }
               
    } catch (InfException e) {
        JOptionPane.showMessageDialog(null, "Databasfel!_3_");
        System.out.println("Internt felmeddelande" + e.getMessage());
    
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Databasfel_4_!");
        System.out.println("Internt felmeddelande" + e.getMessage());
    }
        
    
        
    }//GEN-LAST:event_cbValjstatusActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // sök knappen för datumspann
        
        String startdatum = jTextField1.getText();
        String slutdatum = jTextField2.getText();
        
        if(validering.isValidDatum(startdatum) && validering.isValidDatum(slutdatum)) {
            
            try {
           
                //hämta info från beställningstabellen utefter datumspann och om status = Ej påbörjad.
            String sql = "SELECT * FROM beställning "
                    + "WHERE Datum BETWEEN '" + startdatum + "' AND '" + slutdatum + "' "
                    + "AND status = 'Ej påbörjad' ";
                    
         ArrayList<HashMap<String, String>> beställningar = idb.fetchRows(sql);
                    
      
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
         
       
            // Visa resultaten i textområdet
        if(beställningar!= null && !beställningar.isEmpty()){
            for (HashMap<String, String> rad : beställningar) {
                model.addRow(new Object[]{
                rad.get("BeställningsID"),
                rad.get("Datum"),
                rad.get("PersonalID"),
                rad.get("status"),
               
             
                                        });
                } 
                 
                
            }else {
            JOptionPane.showMessageDialog(null, "Inga besällningar finns inom detta datumspann ");
        }
            
        } catch (InfException e) {
         JOptionPane.showMessageDialog(null, "Databasfel!");
         System.out.println("Internt felmeddelande" + e.getMessage());
}
}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Knapp för att ändra status                                     
      try {
        int rad = jTable1.getSelectedRow();
        if (rad == -1) {
            JOptionPane.showMessageDialog(null, "Välj en beställning i tabellen först.");
            return;
        }
        
        // Hämta Beställnings-ID från tabellen (från kolumn 0)
        String bestallningsID = jTable1.getValueAt(rad, 0).toString();
        
        // Låt användaren skriva in ny status
        String nyStatus = JOptionPane.showInputDialog("Ange ny status för beställningen:");
        
        if (nyStatus != null && !nyStatus.trim().isEmpty()) {
            // Uppdatera databasen
            String sql = "UPDATE beställning SET status = '" + nyStatus + "' WHERE BeställningsID = " + bestallningsID;
            idb.update(sql);
            
            // Uppdatera tabellen direkt utan att behöva ladda om hela sidan
            jTable1.setValueAt(nyStatus, rad, 3); // kolumn 3 är Status
            JOptionPane.showMessageDialog(null, "Statusen har uppdaterats!");
        } else {
            JOptionPane.showMessageDialog(null, "Ingen status angiven.");
        }
        
    } catch (InfException e) {
        JOptionPane.showMessageDialog(null, "Databasfel när status skulle ändras!");
        System.out.println("Internt felmeddelande: " + e.getMessage());
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Ett fel inträffade!");
        System.out.println("Internt felmeddelande: " + e.getMessage());
    }     
        
    }//GEN-LAST:event_jButton2ActionPerformed

  
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SeMaterialbeställningar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SeMaterialbeställningar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SeMaterialbeställningar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SeMaterialbeställningar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new SeMaterialbeställningar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbValjstatus;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}